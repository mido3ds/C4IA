#!/usr/bin/python3
import argparse
import json
import threading
import time
from typing import List, NamedTuple

from mininet.log import setLogLevel
from mininet.util import ipAdd
from mn_wifi.cli import CLI
from mn_wifi.link import adhoc, wmediumd
from mn_wifi.net import Mininet_wifi
from mn_wifi.wmediumdConnector import interference
from simple_websocket_server import WebSocket, WebSocketServer

import location as loc

WIRELESS_CONF = {
    'cls': adhoc,
    'ssid': 'C4IAN-GLOBAL-SSID',
    'ht_cap': 'HT40+',
    'channel': 5,
    'mode': 'g',
}
PROPAGATION_MODEL = {
    'model': 'logDistance',
    'exp': 4,
}
REFRESH_PERIOD = 1 / 15  # 15ms


class Position(NamedTuple):
    lon: int  # x
    lat: int  # y

    def __str__(self) -> str:
        return f'{self.lat},{self.lon},0'

    def to_mn(self):
        x, y = loc.to_mn_coords(self.lon, self.lat)
        return Position(x, y)


class Node(NamedTuple):
    name: str
    position: Position

    def get_sock(self):
        return f'/tmp/{self.name}.router.locsock'

    def get_ip(self):
        t = self.name[0].lower()
        num = int(self.name[1:])
        if t == 'u':
            return ipAdd(num)
        elif t == 'c':
            return ipAdd(num+255)


def read_topo(path_to_json: str) -> List[Node]:
    with open(path_to_json) as f:
        topo = json.load(f)

    return [
        Node(node['name'],
             Position(node['lon'], node['lat']).to_mn())
        for node in topo['nodes']
    ], topo['range'], topo['zlen']


def parse_args():
    parser = argparse.ArgumentParser(
        description='Virtualize a topology using mininet-wifi.'
    )
    parser.add_argument('topology', help='Path to .topo file to load')

    parser.add_argument(
        '--plot', help='Show plot of the topology', action='store_true'
    )

    parser.add_argument(
        '-d', '--debug', help='Print debug level logs', action='store_true'
    )

    parser.add_argument('-p', '--port', default=2479, type=int,
                        help='Port number to listen to')

    return parser.parse_args()


def nodes_locations_thread(stations, nodes):
    while True:
        for node in nodes:
            sock = node.get_sock()
            x, y, _ = stations[node.name].getxyz()
            lat, lon = loc.to_gps_coords(x, y)
            loc.send_location(sock, lon, lat)
        time.sleep(REFRESH_PERIOD)


def map_locations_thread(stations, rng, zlen, socket):
    print('websocket-client has connected')
    try:
        while True:
            nodes = []
            for name, station in stations.items():
                x, y, _ = station.getxyz()
                lat, lon = loc.to_gps_coords(x, y)
                nodes.append({'name': name, 'lon': lon, 'lat': lat})
            socket.send_message(
                json.dumps({'nodes': nodes, 'zlen': zlen, 'range': rng})
            )
            time.sleep(REFRESH_PERIOD)
    except:
        pass


args = parse_args()
nodes, rng, zlen = read_topo(args.topology)

setLogLevel('debug' if args.debug else 'info')

print("*** Creating mn-wifi net")
net = Mininet_wifi(link=wmediumd, wmediumd_mode=interference, plot=args.plot)

print("*** Creating nodes")
stations = {}
for node in nodes:
    stations[node.name] = net.addStation(
        node.name, position=str(node.position), range=rng
    )

print("*** Configuring wifi nodes")
net.configureWifiNodes()
net.setPropagationModel(**PROPAGATION_MODEL)

print("*** Creating links")
for node in nodes:
    intf = f'{node.name}-wlan0'
    net.addLink(
        stations[node.name],
        intf=intf,
        **WIRELESS_CONF
    )
    stations[node.name].setIP(node.get_ip(), intf=intf)

if args.plot:
    print('*** Plotting topology')
    net.plotGraph(max_x=500, max_y=500)


class WSServer(WebSocket):
    def handle(self):
        data = json.loads(self.data)

        pos = Position(data['lon'], data['lat']).to_mn()
        station = stations[data['name']]

        station.setPosition(str(pos))

    def connected(self):
        threading.Thread(target=map_locations_thread,
                         args=(stations, rng, zlen, self), daemon=True).start()

    def handle_close(self):
        print('websocket-client has closed')


def serve(port):
    server = WebSocketServer('', port, WSServer)
    server.serve_forever()


print('*** Starting websocket server')
threading.Thread(target=serve, args=(args.port,), daemon=True).start()

print("*** Starting network")
net.build()
print()

print('*** Starting to send nodes locations')
threading.Thread(target=nodes_locations_thread, args=(
    stations, nodes), daemon=True).start()

print("*** Running CLI")
CLI(net)

print("*** Stopping network")
net.stop()
