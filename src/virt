#!/usr/bin/python3
import argparse
import json
import os
from os.path import dirname, join, realpath
from typing import List, NamedTuple

from mininet.log import setLogLevel
from mn_wifi.cli import CLI
from mn_wifi.link import adhoc, wmediumd
from mn_wifi.net import Mininet_wifi
from mn_wifi.wmediumdConnector import interference

WIRELESS_CONF = {
    'cls': adhoc,
    'ssid': 'C4IAN-GLOBAL-SSID',
    'ht_cap': 'HT40+',
    'channel': 5,
    'mode': 'g',
}
PROPAGATION_MODEL = {
    'model': 'logDistance',
    'exp': 4,
}


class Position(NamedTuple):
    lat: int  # x
    long: int  # y
    z: int  # height relative to sea level

    def __str__(self) -> str:
        return f'{self.lat},{self.long},{self.z}'


class Node(NamedTuple):
    name: str
    position: Position


def read_topo(path_to_json: str) -> List[Node]:
    with open(path_to_json) as f:
        topo = json.load(f)

    def cast(i): return int(float(i))

    return [
        Node(unit['opts']['hostname'],
             Position(cast(unit['x']), cast(unit['y']), 0))
        for unit in topo['aps']
    ] + [
        Node(cmd['opts']['hostname'],
             Position(cast(cmd['x']), cast(cmd['y']), 0))
        for cmd in topo['stations']
    ]


def parse_args():
    parser = argparse.ArgumentParser(
        description='Virtualize a topology using mininet-wifi.'
    )
    parser.add_argument('topology', help='Path to .topo file to load')

    parser.add_argument(
        '--router', help='Path to router executable',
        default=join(dirname(realpath(__file__)), 'router', 'router')
    )
    parser.add_argument(
        '--no-router', help='Disable starting router in each node', action='store_true'
    )

    parser.add_argument(
        '--unit', help='Path to unit executable',
        default=join(dirname(realpath(__file__)), 'unit', 'daemon', 'daemon')
    )
    parser.add_argument(
        '--no-unit', help='Disable starting unit in each node', action='store_true'
    )

    parser.add_argument(
        '--cmd', help='Path to command-center executable',
        default=join(dirname(realpath(__file__)), 'cmd', 'daemon', 'daemon')
    )
    parser.add_argument(
        '--no-cmd', help='Disable starting command-center in each node', action='store_true'
    )
    return parser.parse_args()


args = parse_args()
nodes = read_topo(args.topology)

setLogLevel('info')

net = Mininet_wifi(link=wmediumd, wmediumd_mode=interference)

print("*** Creating nodes")
stations = {}
for node in nodes:
    stations[node.name] = net.addStation(
        node.name, position=str(node.position)
    )

print("*** Configuring wifi nodes")
net.configureWifiNodes()
net.setPropagationModel(**PROPAGATION_MODEL)

print("*** Creating links")
for node in nodes:
    net.addLink(
        stations[node.name],
        intf=f'{node.name}-wlan0',
        **WIRELESS_CONF
    )

print("*** Starting network")
net.build()
print()

if not args.no_router:
    print('*** Starting routers')
    for n in nodes:
        p = f'/var/log/C4IAN/{n.name}/router'
        os.makedirs(p, exist_ok=True)
        stations[n.name].cmd(
            'daemonize',
            '-a',
            '-p', join(p, 'pid'),
            '-o', join(p, 'stdout'),
            '-e', join(p, 'stderr'),
            args.router, '-i', f'{n.name}-wlan0', '-p', 'pass'
        )
        print(n.name+'.router', 'output ->', p+'stdout')
else:
    print('*** Skip starting routers')

if not args.no_router:
    print('*** Starting units')
    for n in nodes:
        count = 0
        if 'u' in n.name:
            count += 1
            p = f'/var/log/C4IAN/{n.name}/unit'
            os.makedirs(p, exist_ok=True)
            stations[n.name].cmd(
                'daemonize',
                '-a',
                '-p', join(p, 'pid'),
                '-o', join(p, 'stdout'),
                '-e', join(p, 'stderr'),
                args.unit  # TODO
            )
            print(n.name+'.unit', 'output ->', p+'stdout')
        if count == 0:
            print("No units")
else:
    print('*** Skip starting units')

if not args.no_router:
    print('*** Starting command centers')
    for n in nodes:
        count = 0
        if 'c' in n.name:
            count += 1
            p = f'/var/log/C4IAN/{n.name}/cmd'
            os.makedirs(p, exist_ok=True)
            stations[n.name].cmd(
                'daemonize',
                '-a',
                '-p', join(p, 'pid'),
                '-o', join(p, 'stdout'),
                '-e', join(p, 'stderr'),
                args.cmd  # TODO
            )
            print(n.name+'.cmd', 'output ->', p+'stdout')
        if count == 0:
            print('No command centers to start')
else:
    print('*** Skip starting command centers')

print("*** Running CLI")
CLI(net)

print("*** Stopping network")
net.stop()
